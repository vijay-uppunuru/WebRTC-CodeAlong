<!DOCTYPE html>
<html>
<head>
	<title></title>
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.10/css/all.css" integrity="sha384-+d0P83n9kaQMCwj8F4RJB66tzIwOKmrdb46+porD/OvrJ+37WqIM7UoBtwHO6Nlg" crossorigin="anonymous">
	<link href="https://fonts.googleapis.com/css?family=Josefin+Sans:400,700" rel="stylesheet">
	<link rel="stylesheet" type="text/css" href="styles.css">
	<script type="text/javascript" src="/socket.io/socket.io.js"></script>

	<!-- Font Awesome -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<!-- Bootstrap core CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
<!-- Material Design Bootstrap -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.5.0/css/mdb.min.css" rel="stylesheet">

</head>
<body>



	<nav class="navbar navbar-light bg-light">
	  <a class="navbar-brand" href="#">
	    <img src="/assets/brand/bootstrap-solid.svg" width="30" height="30" class="d-inline-block align-top" alt="">
	    <i class="fas fa-share-alt-square"></i>
	    WebShare
	  </a>
	  <a href="https://github.com/vijay-uppunuru/WebRTC-CodeAlong"><i class="fab fa-github"></i></a>
	</nav>

	<div class="container">

<div class="titleHeader">
                    <h1><span>WebShare - Pure JavaScript <br> Peer to Peer Filesharing</span></h1>
                    </div>


    <div style="text-align: center;">
	<div style="margin: auto;">
		<input type="file" id="sendFile"/><br/>
		<progress id="fileProgress" value=“1” max="100"></progress>
		<a hidden id="receivedFileLink"></a>
	</div> 



	</div>
        
        <div>
        	<h2 style="text-align: center;">Files Sent/Received: </h2>
          <div id="messageHolder" class="message-holder jumbotron jumbotron-fluid container">
			<div id="messageInName" class="message-in chips chips-placeholder"></div>
			<div id="messageOutName" class="message-out chips chips-placeholder"></div>
          </div>
        </div>
		<h2 style="text-align: center;">Experimental Features</h2>
	<div class="row">
	    <div class="col-sm-6">
	    	<header>Text Chat</header>
		<form id="textChat" class="form-inline">
		    <input type="text" class="form-control" id="myName" placeholder="Name">
		    <input type="text" class="form-control" id="myMessage" placeholder="message">
			  <button id="sendMessage" type="submit" class="btn btn-primary">send</button>
		</form>    
		<div id="chatArea">Message Output:</br></div>
		</div>
		<div class="col-sm-3">
			<video id="myVideoTag" autoplay></video>
		</div>  
		<div class="col-sm-3">
		<video id="theirVideoTag" autoplay></video>
		</div>
	</div>


	<!-- <div> -->
		<!-- <label>Your Name</label><input id="myName" type="text"/> -->
		<!-- <label>Message</label><input id="myMessage" type="text"/> -->
		<!-- <input id="sendMessage" type="submit"/> -->
		<div id="chatArea"></br></div>
		<div id="signalingArea"><br></div>
	<!-- </div> -->


	</div>

                      
<!--Footer-->
<footer class="page-footer font-small blue py-3 mt-2">
	<p style="text-align: center;">If you're interested in playing with WebShare, you can try it out here, and <a href="https://github.com/vijay-uppunuru/WebRTC-CodeAlong"><u>find the source code here.</u></a></p>

</footer>
<!--/.Footer-->
              


	<script type="text/javascript">
		
		var myVideoArea = document.querySelector("#myVideoTag");
		var theirVideoArea = document.querySelector("#theirVideoTag");
		// var videoSelect = document.querySelector('#camera');
		var myName = document.querySelector("#myName");
		var myMessage = document.querySelector("#myMessage");
		var sendMessage = document.querySelector("#sendMessage");
		var chatArea = document.querySelector("#chatArea");
		var signalingArea = document.querySelector('#signalingArea');
		var sendFile = document.querySelector("input#sendFile");
		var fileProgress = document.querySelector("progress#fileProgress");
		var downloadLink = document.querySelector('a#receivedFileLink');

		var ROOM = "chat";
		var FILES_ROOM = "files";
		var SIGNAL_ROOM = "signal_room";

		var configuration = {
			'iceServers': [{
				'url': 'stun:stun.l.google.com:19302'
			}]
		};
		var rtcPeerConn;
		var dataChannelOptions = {
			ordered: true, //no guaranteed delivery, unreliable but faster 
			maxRetransmitTime: 1000, //milliseconds
		};

		var dataChannel;

		var messageHolder = document.querySelector("#messageHolder");
		var receivedFileName;
		var receivedFileSize;
		var fileBuffer = [];
		var fileSize = 0;
		var fileTransferring = false;



		io = io.connect();
		io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM, "files_room": FILES_ROOM});

		//Send a first signaling message to anyone listening
		//This normally would be on a button click
		io.emit('signal',{"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});

		io.on('signaling_message', function(data) {
			console.log("Signal received: " + data.type);
			//Setup the RTC Peer Connection object
			if (!rtcPeerConn)
				startSignaling();

			if (data.type != "user_here") {
				var message = JSON.parse(data.message);
				if (message.sdp) {
					rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
						// if we received an offer, we need to answer
						if (rtcPeerConn.remoteDescription.type == 'offer') {
							rtcPeerConn.createAnswer(sendLocalDesc, logError);
						}
					}, logError);
				}
				else {
					rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
				}
			}
		});

		io.on('files', function(data) {
			receivedFileName = data.filename;
			receivedFileSize = data.filesize;
			console.log("websockets says the file on it's way is " + receivedFileName + " (" + receivedFileSize + ")");
			fileTransferring = true;

		});

		function startSignaling() {
			console.log("starting signaling...");
			rtcPeerConn = new webkitRTCPeerConnection(configuration, null);
			dataChannel = rtcPeerConn.createDataChannel('textMessages', dataChannelOptions);
			
			dataChannel.onopen = dataChannelStateChanged;
			rtcPeerConn.ondatachannel = receiveDataChannel;


			// send any ice candidates to the other peer
			rtcPeerConn.onicecandidate = function (evt) {
				if (evt.candidate)
					io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
				console.log("completed that ice candidate...");
			};
			
			// let the 'negotiationneeded' event trigger offer generation
			rtcPeerConn.onnegotiationneeded = function () {
				console.log("on negotiation called");
				rtcPeerConn.createOffer(sendLocalDesc, logError);
			}
		
			// once remote stream arrives, show it in the remote video element
			rtcPeerConn.onaddstream = function (evt) {
				console.log("going to add their stream...");
				theirVideoArea.src = URL.createObjectURL(evt.stream);
			};

			// get a local stream, show it in our video tag and add it to be sent
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
			navigator.getUserMedia({
				'audio': false,
				'video': {
					mandatory: {
						minWidth: 320,
						maxWidth: 320,
						minHeight: 180,
						maxHeight: 180
					}
				}
			}, function (stream) {
				console.log("going to display my stream..." + stream);
				myVideoArea.src = URL.createObjectURL(stream);
				rtcPeerConn.addStream(stream);
			}, logError);
		}

		function dataChannelStateChanged() {
			if (dataChannel.readyState === 'open') {
				console.log("Data Channel open");
				dataChannel.onmessage = receiveDataChannelMessage;
			}
		}

		function receiveDataChannel(event) {
			console.log("Receiving a data channel");
			dataChannel = event.channel;
			dataChannel.onmessage = receiveDataChannelMessage;
		}

		function appendChatMessage(msg, className) {
			var div = document.createElement('div');
			div.className = className;
			div.innerHTML = '<span>' + msg + '</span>';
			messageHolder.appendChild(div);
		}

		function receiveDataChannelMessage(event) {
			console.log("Incoming Message");
			console.log("From DataChannel: " + event.data);
				
			//This is where we process incoming files
			if(fileTransferring){
			fileBuffer.push(event.data);
			fileSize += event.data.byteLength;
			fileProgress.value = fileSize;
			
			//Provide link to downloadable file when complete
			if (fileSize === receivedFileSize) {
				var received = new window.Blob(fileBuffer);
				fileBuffer = [];
				downloadLink.href = URL.createObjectURL(received);
				downloadLink.download = receivedFileName;
				downloadLink.appendChild(document.createTextNode(receivedFileName + "(" + fileSize + ") bytes"));
				console.log(downloadLink + "from receiveDataChannel");
				fileTransferring = false;
				//Also put the file in the text chat area
				var linkTag = document.createElement('a');
				linkTag.href = URL.createObjectURL(received);
				linkTag.download = receivedFileName;
				linkTag.appendChild(document.createTextNode(receivedFileName));

				var div = document.createElement('div');
				div.className = 'message-out';
				div.appendChild(linkTag);
				console.log(typeof linkTag);
				messageHolder.appendChild(div);
				fileSize = 0;			
			}
		}
		else {
			appendChatMessage(event.data, 'message-out');
		}
		}


		function sendLocalDesc(desc) {
			rtcPeerConn.setLocalDescription(desc, function () {
				console.log("sending local description");
				io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
			}, logError);
		}

		function logError(error) {
			console.log(error.name + ': ' + error.message);
		}

		io.on('announce', function(data){
			displayMessage(data.message);
		});

		io.on('message', function(data) {
			displayMessage(data.author + ": " + data.message);
		});

		function displayMessage(message){
			chatArea.innerHTML = chatArea.innerHTML + "<br>" + message;
		}

		function displaySignalMessage(message){
			signalingArea.innerHTML = signalingArea.innerHTML + "<br>" + message;
		}
		
		sendMessage.addEventListener('click', function(ev){
			appendChatMessage(myMessage.value, 'message-in');
			io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
		    document.getElementById("textChat").reset();
			// dataChannel.send(myName.value + " says " + myMessage.value);
			
			ev.preventDefault();
		}, false);

		sendFile.addEventListener('change', function(ev){
			var file = sendFile.files[0];
			console.log("sending file " + file.name + " (" + file.size + ") ...");
			io.emit('files',{"filename":file.name, "filesize":file.size, "room":FILES_ROOM});

			appendChatMessage(file.name, 'message-in');
			fileTransferring = true;

			fileProgress.max = file.size;
			var chunkSize = 16384;
			var sliceFile = function(offset) {
				var reader = new window.FileReader();
				reader.onload = (function() {
					return function(e) {
						dataChannel.send(e.target.result);
						if (file.size > offset + e.target.result.byteLength) {
							window.setTimeout(sliceFile, 0, offset + chunkSize);
							}
						fileProgress.value = offset + e.target.result.byteLength;
					};
				})(file);
				var slice = file.slice(offset, offset + chunkSize);
				reader.readAsArrayBuffer(slice);
			};
			sliceFile(0);
			fileTransferring = false;		
		
		}, false);


	</script>
<!-- 	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js" integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm" crossorigin="anonymous"></script>
	<script
  src="https://code.jquery.com/jquery-3.3.1.js"
  integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
  crossorigin="anonymous"></script> -->

<!-- JQuery -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<!-- Bootstrap tooltips -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.13.0/umd/popper.min.js"></script>
<!-- Bootstrap core JavaScript -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/js/bootstrap.min.js"></script>
<!-- MDB core JavaScript -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.5.0/js/mdb.min.js"></script>
     


</body>
</html>